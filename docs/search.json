[{"path":"index.html","id":"home","chapter":"Home","heading":"Home","text":"","code":""},{"path":"banding.html","id":"banding","chapter":"1 Banding","heading":"1 Banding","text":"now unexplained banding phenomenon shows cases lower elevation scans Dutch radars. appears result something going dual-PRF scans, especially vicinity clutter sources sea (wind parks, ships).","code":""},{"path":"banding.html","id":"the-problem","chapter":"1 Banding","heading":"1.1 The problem","text":"Let’s load example scan calculate RBC PPI shows issue clearly.pvol create \\((r, )\\) range-azimuth plot 7 lowest scans, issue visible higher elevations scan. Though may still occur , due elevations highest scans clear effect PPIs anyways.suggests ’s related dual-PRF scans indeed, common scans Dutch radar, just throw serve important purpose: unambiguous velocities dual-PRF scans highest, VRAD values least likely fold/alias. following scans use dual-PRFs.words, 3 elevations use, two \\(0.3^\\circ\\) scans bird-bath scan \\(90^\\circ\\), ’s option, waste, throw dual-PRF scans .","code":"\npvolfile <- \"data/20201002/NLDHL_pvol_20201002T0550_6234.h5\"\npvol <- read_pvolfile(file = pvolfile, param = \"all\")\nvp <- calculate_vp(pvolfile, verbose = FALSE)\nppi_banding <- integrate_to_ppi(pvol, vp, xlim = c(-180000, 180000), ylim = c(-180000, 180000), res = 500, param = \"DBZH\")\nplot_banding <- plot(ppi_banding) + ggtitle(\"Original RBC PPI\")\nplot_banding\nelevs <- get_elevation_angles(pvol)\nnr_elevs <- 1:7\nlapply(nr_elevs, function(x) {\n  plot(pvol$scans[[x]], xlim = c(0, 320000)) + \n    ggtitle(paste0(\"Elevation: \", round(elevs[x], 2),\n                   \"; High prf: \", pvol$scans[[x]]$attributes$how$highprf,\n                   \"; Low prf: \", pvol$scans[[x]]$attributes$how$lowprf))\n})\nget_elevation_angles(pvol)[which(sapply(pvol$scans, function(x) x$attributes$how$highprf != 0 & x$attributes$how$lowprf != 0))]##  [1]  0.3  0.8  1.2  2.0  2.8  4.5  6.0  8.0 10.0 12.0 15.0 20.0 25.0"},{"path":"banding.html","id":"solution","chapter":"1 Banding","heading":"1.2 Solution","text":"can plot parameters single elevation scan see possibilities filter banding issue .seems RHOHV DPR sufficient filter majority areas banding pattern occurs. fact, standard rain filter de-speckling (using RHOHV > 0.95 DPR < -12) probably unintentionally done . can apply filter plot results .Now recalculate RBC (right) compare results initial version banding (left).’s much better already.Finally, example moment Herwijnen radar shows substantial banding (left), moment filtered quite bit (right). load following pvol: NLHRW_pvol_20201002T1350_6356.h5.Obviously rain-filtering needs work, particular smoothing despeckling, approaches improve precipitation filtering presumably automatically improve filtering banding issue well.","code":"\npvol <- calculate_param(pvol, \n                        ZDRL = 10 ** ((DBZH - DBZV) /10),\n                        DPR = 10 * log10((ZDRL + 1 - 2 * ZDRL^0.5 * RHOHV) / (ZDRL + 1 + 2 * ZDRL^ 0.5 * RHOHV)))\nlapply(c(\"DBZH\", \"VRADH\", \"RHOHV\", \"DPR\"), function(x) plot(pvol$scans[[1]], xlim = c(0, 200000), param = x))\npvol <- calculate_param(pvol, RAIN = RHOHV >= 0.95, DBZHF = DBZH)\n\npvol$scans <- lapply(pvol$scans, function(x) {\n  dbzh <- x$params[[\"DBZH\"]]\n  rhohv <- x$params[[\"RHOHV\"]]\n  dpr <- x$params[[\"DPR\"]]\n  dbzh[rhohv >= 0.95] <- NA\n  dbzh[dpr < -12] <- NA\n  x$params[[\"DBZHF\"]] <- dbzh\n  return(x)\n})\n\nlapply(nr_elevs, function(x) {\n  plot(pvol$scans[[x]], xlim = c(0, 320000), param = \"DBZHF\") + \n    ggtitle(paste0(\"Elevation: \", round(elevs[x], 2),\n                   \"; High prf: \", pvol$scans[[x]]$attributes$how$highprf,\n                   \"; Low prf: \", pvol$scans[[x]]$attributes$how$lowprf))\n})\npvol_filtered <- calculate_param(pvol, DBZH = DBZHF)\nppi_nobanding <- integrate_to_ppi(pvol_filtered, vp, xlim = c(-180000, 180000), ylim = c(-180000, 180000), res = 500)\nplot_nobanding <- plot(ppi_nobanding) + ggtitle(\"Filtered RBC PPI\")\nplot_banding + plot_nobanding + plot_layout(guides = \"collect\")"},{"path":"simple-rain-segmentation.html","id":"simple-rain-segmentation","chapter":"2 Simple rain segmentation","heading":"2 Simple rain segmentation","text":"Classifying rain using RHOHV DPR (depolarization ratio, Kilambi et al.) gets us way elegant filtering procedure rain, issue remains edges rain clouds, dual-pol products derivatives less performant. , try image processing technique can help improve rain segmentation bit .","code":""},{"path":"simple-rain-segmentation.html","id":"problem","chapter":"2 Simple rain segmentation","heading":"2.1 Problem","text":"Let’s load pvol rain show looks like range-bias correction.","code":"\npvolfile <- \"data/20201002/NLHRW_pvol_20201002T1205_6356.h5\"\npvol <- read_pvolfile(file = pvolfile, param = \"all\")\nvp <- calculate_vp(pvolfile, verbose = FALSE)\nppi_rainy <- integrate_to_ppi(pvol, vp, xlim = c(-180000, 180000), ylim = c(-180000, 180000), res = 500, param = \"DBZH\")\nplot(ppi_rainy)"},{"path":"simple-rain-segmentation.html","id":"solution-1","chapter":"2 Simple rain segmentation","heading":"2.2 Solution","text":"’s clearly lot rain scan. Now, can filter using depolarization ratio, requires additional steps:reasons radar rangegates full combination DBZH, DBZV RHOHV contained within, means pixels either ZDR calculated, RHOHV available calculation DPR.edges rain clouds necessarily well identified DPR (RHOHV matter), need apply buffering/smoothing improve .","code":""},{"path":"simple-rain-segmentation.html","id":"filter-pixels-without-dual-pol-measurements","chapter":"2 Simple rain segmentation","heading":"2.2.1 Filter pixels without dual-pol measurements","text":"First, let’s make plot pixels lose filter pixels can calculate DPR , means DBZV RHOHV must available.can also plot difference, make difference 0 transparent better see PPI pixels changed dramatically, plot differences histogram.PPI histogram suggest VIR differences occur regions already high reflectivities, particular PPI must mostly rain. filtering pixels doesn’t hurt much. Presumably applies across board, ’ll require investigation. Nevertheless, now assume filtering pixels presence DBZH seems reasonable.","code":"\npvol_original <- pvol  # Let's keep the original pvol for comparison\n\npvol <- calculate_param(pvol, \n                        ZDRL = 10 ** ((DBZH - DBZV) /10),\n                        DPR = 10 * log10((ZDRL + 1 - 2 * ZDRL^0.5 * RHOHV) / (ZDRL + 1 + 2 * ZDRL^ 0.5 * RHOHV)),\n                        DBZHO = DBZH)\n\npvol$scans <- lapply(pvol$scans, function(x) {\n  x$params[[\"DBZH\"]][is.na(x$params[[\"DPR\"]])] <- NA\n  x$params[[\"RHOHV\"]][is.na(x$params[[\"DBZH\"]])] <- NA\n  return(x)\n})\n\nppiplot_rainy <- plot(ppi_rainy) + ggtitle(\"Original RBC PPI\")\nppi_dualpol <- integrate_to_ppi(pvol, vp, xlim = c(-180000, 180000), ylim = c(-180000, 180000), res = 500, param = \"DBZH\")\nppiplot_dualpol <- plot(ppi_dualpol) + ggtitle(\"Dual-pol available RBC PPI\")\n\nppiplot_rainy + ppiplot_dualpol + plot_layout(guides = \"collect\")\nppi_difference <- ppi_dualpol\nppi_difference$data$VIR <- ppi_rainy$data$VIR - ppi_dualpol$data$VIR\nppi_difference$data$VIR[ppi_difference$data$VIR == 0] <- NA\n\nppiplot_difference <- plot(ppi_difference) + \n  scale_fill_viridis_c(trans = \"log10\") +\n  labs(fill = \"VIR diff\") +\n  # guides(fill = guide_legend(title = \"VIR diff\")) +\n  ggtitle(\"Original pixels - pixels with DPR\")\n\nas.data.frame(ppi_difference$data) %>%\n  drop_na() %>%\n  filter(VIR < 1e5) %>%\n  ggplot() +\n  geom_histogram(aes(x = VIR)) + \n  scale_x_continuous(trans = \"log10\") +\n  labs(x = \"VIR diff\") -> plot_difference\n\nppiplot_difference + plot_difference"},{"path":"simple-rain-segmentation.html","id":"image-processing","chapter":"2 Simple rain segmentation","heading":"2.2.2 Image processing","text":"start illustrating approach single scan. use DPR main masking methodology, though ’s possible extend technique include RHOHV, combined approach may perform better. plot \\((r,)\\) plot white pixels classified rain (dpr < -12), black pixels .shows lot pixels, especially close radar (lower x-values), get flagged rain DPR value. Kilambi et al. recommend despeckling. Let’s use median-filter apply despeckling.already looks better, now ‘blurred’ regions larger pixels. assume true rain occurs mostly larger areas, can compute contiguous areas flagged precipitation, calculate surface (number pixels within) filter based minimum number pixels. case, classify rain rain covers least 50 pixels/rangegates.Now, ’s chance miss pixels left right, conservatively filter rain, buffer areas bit. , ’ll calculate euclidean distance non-rain rain pixels distance < 5 units, ’ll flag pixels rain well.can now check looks like apply masking approach scans polar volumes. First plot single scan ’ve cleaned far.Except continuing presence interference pattern, possibly filtering areas ground clutter wind parks, see much cleaner rain filtering buffered threshold filter.Now let’s apply full pvol., calculate RBC plot resulting PPI.first sight RBC PPI may look quite messy filtering, overall approach seems work quite well:edges rain clouds removed quite well, mostly exception > 80km radar, probably mostly due dual-pol measurements working well anymore distances anyways.can still apply post-processing RBC PPIs, example filtering pixels high values VIR birds. simply despeckle, calculate median value across whole image.now applied single buffering procedure scans elevations, possibly tweaked elevation. higher elevations, can probably filter quite agressively, especially also include altitude ground filtering approach.Many speckles visible necessarily rain, already present original RBC PPI, approach definitely worsen issue much.Finally, outcome range-bias correction projection integrated reflections cartesian grid, consider vertically stack rain segmentations projecting slant ground range using combined mask filter entire regions covered rain. assumes rain clouds always stretch vertically along full altitude range covered radar, may realistic, create clean interpretable RBC PPI acceptable trade-.","code":"\nscan.dpr <- as.cimg(pvol$scans[[1]]$params[[\"DPR\"]])\n\n(scan.dpr <= -12 & !is.na(scan.dpr)) %>%\n  plot()\n(scan.dpr <= -12 & !is.na(scan.dpr)) %>%\n  medianblur(4) %>%\n  threshold(0) ->\n  despeckled\n\ndespeckled %>% plot()\ndespeckled %>%\n  split_connected() %>%\n  purrr::keep(~ sum(.) > 50) %>%\n  parany() -> areafilter\n\nareafilter %>% plot()\nareafilter %>%\n  distance_transform(1, metric = 2) %>%\n  threshold(5) -> buffered\n\n(-buffered) %>%\n  plot()\npvol_buffer <- pvol\npvol_thresh <- pvol\n\npvol_buffer$scans[[1]]$params$DBZH[!as.matrix(buffered)] <- NA\npvol_thresh$scans[[1]]$params$DBZH[pvol_thresh$scans[[1]]$params$DPR < -12 | pvol_thresh$scans[[1]]$params$RHOHV >= 0.95] <- NA\n\n(plot(pvol_original$scans[[1]], xlim = c(0, 180000)) + ggtitle(\"Original PVOL\")) /\n  (plot(pvol_thresh$scans[[1]], xlim = c(0, 180000)) + ggtitle(\"Simple threshold filter\")) /\n  (plot(pvol_buffer$scans[[1]], xlim = c(0, 180000)) + ggtitle(\"Buffered threshold filter\"))\nrainfilter <- function(scan) {\n  if (scan$geo$elangle < 90) {\n    dpr <- as.cimg(scan$params[[\"DPR\"]])\n    (dpr <= -12 & !is.na(dpr)) %>%\n      medianblur(4) %>%  # Works adequate for de-speckling\n      threshold(0) %>%  # Set all pixels that have been affected by median blurring to 1, rest to 0\n      split_connected() %>%  # Split image in contiguous areas classified as rain\n      purrr::keep(~ sum(.) > 50) %>%  # Only keep contiguous rain areas if area is > 50 pixels\n      parany() -> contiguous  # Merge to 1 image again\n    if (!is.null(contiguous)) {  # Only buffer if any rain areas of > 50 pixels are retained\n      contiguous %>%\n        distance_transform(1, 2) %>%  # Calculate Euclidean distance (2nd argument) to pixels classified as 1\n        threshold(5) -> dpr_filter\n      \n      dpr_filter <- -dpr_filter\n      scan$params$DBZH[!as.matrix(dpr_filter)] <- NA \n    }\n  }\n  return(scan)\n}\n\npvol$scans <- lapply(pvol$scans, function(x) {\n  x$params[[\"DBZH\"]][is.na(x$params[[\"DPR\"]])] <- NA\n  # x$params[[\"DBZH\"]][x$params[[\"RHOHV\"]] >= 0.95] <- NA\n  # x$params[[\"DBZH\"]][x$params[[\"DPR\"]] < -12] <- NA\n  x <- rainfilter(x)\n  return(x)\n})\nppi_buffered <- integrate_to_ppi(pvol, vp, xlim = c(-180000, 180000), ylim = c(-180000, 180000), res = 500, param = \"DBZH\")\nppiplot_buffered <- plot(ppi_buffered) + ggtitle(\"Buffered rain filtering\")\n\n(ppiplot_rainy + ggtitle(\"Original RBC PPI\")) + ppiplot_buffered + plot_layout(guides = \"collect\")"}]
